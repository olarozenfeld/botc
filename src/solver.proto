// Copyright 2022 Ola Rozenfeld
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package botc;

import "src/game_log.proto";

message SolverRequest {
  message Assumptions {
    message PlayerRole {
      string player = 1;
      Role role = 2;
      bool is_not = 3;  // True iff player does not have role.
    }
    repeated PlayerRole roles = 1;
    repeated Role roles_in_play = 2;
    repeated Role roles_not_in_play = 3;
  }
  // Additional assumptions to add into the model before solving.
  Assumptions starting_assumptions = 1;  // State after setup.
  Assumptions current_assumptions = 2;  // Current state.

  // If set, at most one world will be returned.
  bool stop_after_first_solution = 3;

  // If set, will count all possible boolean assignments for each world.
  // Note this might slow down the solver considerably!
  // TODO(olaola): implement this.
  bool count_sub_worlds = 4;

  // If set, will only return a world for each possible alive demon.
  bool solve_for_demon = 5;

  // Debug options.
  // If present, directory to dump full SAT variable assignment files into for
  // each solution.
  string output_sat_model_solutions_dir = 6;
}

message SolverResponse {
  message World {
    // Fully specified current player roles in an assignment.
    map<string, Role> current_roles = 1;

    // Starting player roles in an assignment. Omitted if equal to their current
    // roles.
    map<string, Role> starting_roles = 2;

    // When specified, number of worlds with this assignment (or with this
    // demon, if solve_for_demon was set in the request).
    int64 count = 3;
  }
  repeated World worlds = 1;
}