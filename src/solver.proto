// Copyright 2022 Ola Rozenfeld
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package botc;

import "src/game_log.proto";

message SolverRequest {
  message Assumptions {
    message PlayerRole {
      string player = 1;
      Role role = 2;
      bool is_not = 3;  // True iff player does not have role.
    }
    // Starting assignment.
    repeated PlayerRole starting_roles = 1;

    // Current assignment.
    repeated PlayerRole current_roles = 2;

    // Starting roles in play.
    repeated Role roles_in_play = 3;

    // Starting roles not in play.
    repeated Role roles_not_in_play = 4;

    // Players assumed evil.
    repeated string is_evil = 5;

    // Players assumed good.
    repeated string is_good = 6;

    // TODO(olaola): if needed, we can expose a lot of other variables such as
    // "Shamyrra was poisoned day 2" or "Joanos caught a starpass night 3".
  }
  // Assumptions to add into the model before solving.
  Assumptions assumptions = 1;

  // If set, at most one world will be returned.
  bool stop_after_first_solution = 2;

  // Debug mode. If enabled, we dump the SAT model proto and the full SAT
  // variable assignment files alongside world assignments for each solution
  // under the "./tmp/" directory.
  bool debug_mode = 3;
}

message SolverResponse {
  message World {
    // Fully specified current player roles in an assignment.
    map<string, Role> current_roles = 1;

    // Starting player roles in an assignment. Omitted if equal to their current
    // roles.
    map<string, Role> starting_roles = 2;

    // Could also expose other interesting variables, e.g. starpasses, poisons,
    // Mayor bounces, etc.
  }
  repeated World worlds = 1;

  // The found worlds grouped by the alive demon.
  message AliveDemon {
    // The alive demon player.
    string name = 1;
    // The number of worlds with this alive demon.
    int32 count = 2;
    // TODO(olaola): add heuristic total weight / likelihood.
  }
  repeated AliveDemon alive_demon_options = 2;
}